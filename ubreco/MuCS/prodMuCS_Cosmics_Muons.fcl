#include "services_microboone.fcl"
#include "MuCSMCGen_module.fcl"
#include "cry_microboone.fcl"
#include "corsika_microboone.fcl"

process_name: MuCSMCGen

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "mucs_hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_gen_services
  IFDH:         {}
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

physics:
{

 producers:
 {
   generator: @local::microboone_MuCSMCGen
   corsika:   @local::microboone_corsika_cmc
   rns:       { module_type: "RandomNumberSaver" }
 }
 simulate: [ rns, generator, corsika ] 
 stream1:  [ out1 ]
 trigger_paths: [simulate] 
 end_paths:     [stream1]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "prodMuCS_Single_Muons_%tc_gen.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}
